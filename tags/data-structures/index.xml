<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data structures on Jincheng Li</title>
    <link>http://jincheng.li/tags/data-structures/</link>
    <description>Recent content in data structures on Jincheng Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Oct 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://jincheng.li/tags/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practical Hash Tables</title>
      <link>http://jincheng.li/post/practical-hash-tables/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://jincheng.li/post/practical-hash-tables/</guid>
      <description>This is a quick review of hash tables and some musings about their performance. The article was written in 2021, around the first time I needed to really pay attention to the performance and detailed design of hash tables. It comes off as fairly rudimentary to me now, and probably to you too if you know anything about performance optimization or CPU architecture. Please be warned.&#xA;Hash tables: from the outside Most languages come with standard library implementations of hash tables, usually presented as an associative array of (key, value) pairs.</description>
    </item>
  </channel>
</rss>
